// ------------------------------------------------------------------------
// Integration tests
// ------------------------------------------------------------------------

procedure TestCalculateOrderTotalValue.OrderId_1;
var
  actual: Currency;
begin
  actual := dmOrders.CalculateOrderTotalValue(1);
  Assert.AreEqual(Currency(2371.60), actual, 0.0001);
end;








// ------------------------------------------------------------------------
// ------------------------------------------------------------------------



type
  TFakeOrder = record
    OrderId: Integer;
    CustomerId: string;
    Products: TArray<Integer>;
  end;

  TVariantArray = TArray<Variant>;


function TestCalculateOrderTotalValue.WithOrder(const aLevel: string;
  const aItems: TArray<TVariantArray>): TFakeOrder;
var
  itemRecords: TArray<TItemRecord>;
  i: Integer;
  itemsCount: Integer;
begin
  DataModuleConnection.GetConnection().StartTransaction;
  Result.CustomerId := 'testuserid-' + Format('%.5d', [Random(100000)]);
  dmOrders.AddCustomer(Result.CustomerId, 'Firma01', aLevel);
  itemsCount := Length(aItems);
  SetLength(Result.Products, itemsCount);
  for i := 0 to itemsCount - 1 do
    Result.Products[i] := dmOrders.AddProduct(Format('test-product-%.2d',
      [i + 1]), aItems[i, 2]);
  SetLength(itemRecords, itemsCount);
  for i := 0 to itemsCount - 1 do
    itemRecords[i] := TItemRecord.Create(Result.Products[i], aItems[i, 0],
      aItems[i, 1]);
  Result.OrderId := dmOrders.AddOrder(Result.CustomerId,
    EncodeDate(2020, 10, 1 + Random(31)), itemRecords);
  DataModuleConnection.GetConnection().Commit;
end;

procedure TestCalculateOrderTotalValue.RemoveFakeOrder(const fakeOrder: TFakeOrder);
var
  i: Integer;
begin
  DataModuleConnection.GetConnection().StartTransaction;
  dmOrders.RemoveOrder(fakeOrder.OrderId);
  for i := 0 to High(fakeOrder.Products) do
    dmOrders.RemoveProduct(fakeOrder.Products[i]);
  dmOrders.RemoveCustomer(fakeOrder.CustomerId);
  DataModuleConnection.GetConnection().Commit;
end;

// ----

const
  Deductable = true;

procedure TestCalculateOrderTotalValue.OneNotDeductableItem;
var
  actual: Currency;
begin
  fFakeOrder := WithOrder('silver', [
    { } [1000.00, 2, not Deductable]]); // 2x 1000 = 2000
  // 2000 => 5% => 2000
  actual := dmOrders.CalculateOrderTotalValue(fFakeOrder.OrderId);
  Assert.AreEqual(Currency(2000.00), actual, 0.0001);
  RemoveFakeOrder(fFakeOrder);
end;

procedure TestCalculateOrderTotalValue.OneDeductableItem;
var
  actual: Currency;
begin
  fFakeOrder := WithOrder('silver', [
    { } [600.00, 2, Deductable]]); // 2x 600 = 1200
  // 1200 => 5% => 1140
  actual := dmOrders.CalculateOrderTotalValue(fFakeOrder.OrderId);
  Assert.AreEqual(Currency(1140.00), actual, 0.0001);
  RemoveFakeOrder(fFakeOrder);
end;

procedure TestCalculateOrderTotalValue.TwoItems_OneDeductable;
var
  actual: Currency;
begin
  fFakeOrder := WithOrder('silver', [
    { } [300.00, 2, Deductable], // 2x 300 = 600
    { } [600.00, 1, not Deductable]]); // 600
  // 1200 => 10% => 600*90% + 600 = 1170
  actual := dmOrders.CalculateOrderTotalValue(fFakeOrder.OrderId);
  Assert.AreEqual(Currency(1170.00), actual, 0.0001);
  RemoveFakeOrder(fFakeOrder);
end;

procedure TestCalculateOrderTotalValue.ThreeItems_OneDeductable;
var
  actual: Currency;
begin
  fFakeOrder := WithOrder('silver', [
    { } [300.00, 2, Deductable], // 2x 300 = 600
    { } [600.00, 1, not Deductable], // 600
    { } [100.00, 5, Deductable]]); // 5x 100 = 500
  // 1700 => 5% => 1100*95% + 600 = 1645
  actual := dmOrders.CalculateOrderTotalValue(fFakeOrder.OrderId);
  Assert.AreEqual(Currency(1645.00), actual, 0.0001);
  RemoveFakeOrder(fFakeOrder);
end;







// ------------------------------------------------------------------------
// Mock
// ------------------------------------------------------------------------



  fDiscountTableRepositoryMock := TMock<IDiscountTableRepository>.Create;
  fDiscountTableSilver := TDiscountTable.Create('silver');
  fDiscountTableGold := TDiscountTable.Create('gold');
  fDiscountTableRepositoryMock.Setup.WillReturn
    (TValue.From<TDiscountTable>(fDiscountTableSilver)).When.Get('silver');
  fDiscountTableRepositoryMock.Setup.WillReturn
    (TValue.From<TDiscountTable>(fDiscountTableGold)).When.Get('gold');

  fDiscountTableSilver
  { } .Add(0, 800, 0)
  { } .Add(800, 1500, 2)
  { } .Add(1500, 2000, 5)
  { } .Build(8);

  fDiscountTableGold
  { } .Add(0, 800, 0)
  { } .Add(800, 1500, 2)
  { } .Add(1500, 2000, 5)
  { } .Build(8);


